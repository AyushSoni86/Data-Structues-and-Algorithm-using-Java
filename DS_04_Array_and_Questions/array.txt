Question 1 : Majority element 

gfg link - https://practice.geeksforgeeks.org/problems/majority-element-1587115620/1

code to submit on geeksforgeeks
class Solution{
    static int majorityElement(int arr[], int size){
        int ansIndex = 0;
        int count = 1;
        for(int i = 1 ; i < arr.length ; i++){
            if(arr[i] == arr[ansIndex]){
                count ++;
            }else{
                count--;
            }
            if(count == 0){
                count = 1;
                ansIndex = i;
            }
        }
        
        int major = arr[ansIndex];
        int ans = 0;
        for(int i = 0 ; i < arr.length ; i++){
            if(arr[i] == major) ans++;
        }
        
        return ans > size/2 ? major: -1;
    }
}

leetcode link - https://leetcode.com/problems/majority-element/
code for leetcode
class Solution {
    public int majorityElement(int[] arr) {
        int ansIndex = 0, cnt = 1;      
        for(int i = 1 ; i < arr.length ; i++){
            if(arr[i]== arr[ansIndex]) cnt++;
            else cnt--;
            if(cnt == 0) {
                cnt = 1;
                ansIndex = i;
            }
        }        
        return  arr[ansIndex];
    }
}

Question 2 : Kadane's Algorithm

static int maxSumSubArray(int[] arr){
    int maxSum = 0;
    int currentSum = 0;
    for(int i = 0 ; i < arr.length ; i++){
        currentSum = currentSum + arr[i];
        if(currentSum > maxSum){
            maxSum = currentSum;
        }
        if(currentSum < 0){
            currentSum = 0;
        }
    }
    return maxSum;

}

gfg link : https://practice.geeksforgeeks.org/problems/kadanes-algorithm-1587115620/1 

code to submit on gfg

class Solution{

    long maxSubarraySum(int arr[], int n){
        long maxSum = 0;
        long currentSum = 0;
        for(int i = 0 ; i < arr.length ; i++){
            currentSum = currentSum + arr[i];
            if(currentSum > maxSum){
                maxSum = currentSum;
            }
            if(currentSum < 0){
                currentSum = 0;
            }
        }
        return maxSum > 0 ? maxSum : findMax(arr);
    }
    
    long findMax(int[] arr){
        long max = arr[0];
        for(int i = 0 ; i < arr.length ; i++){
            if(arr[i] > max) max = arr[i];
        }
        return max;
    }
}


Question 3 : Stock Buy and Sell (part - 1 : one stock at a time)
